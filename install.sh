#!/bin/bash

# Installation script for the Familiar project
# Correctly handles username when run with sudo

# --- Configuration ---
PROJECT_DIR=$(pwd) # Get the current directory (where the script is run from)
SERVICE_NAME="familiar-bot"
SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
ENV_DIR="/etc/familiar"
ENV_FILE="${ENV_DIR}/familiar_service.env"
PYTHON_PATH=$(which python3) # Find system python3 path

# --- Determine the correct user ---
if [ "$EUID" -eq 0 ] && [ -n "$SUDO_USER" ]; then
  # Script is run with sudo, use the original user
  CURRENT_USER="$SUDO_USER"
else
  # Script is run directly by the user
  CURRENT_USER=$(whoami)
fi
CURRENT_GROUP=$(id -gn "$CURRENT_USER") # Get the primary group of the user

# --- Check for root privileges for execution ---
if [ "$EUID" -ne 0 ]; then
  echo "Пожалуйста, запустите этот скрипт с правами root (используя sudo)."
  exit 1
fi

# --- Check if Python3 path was found ---
if [ -z "$PYTHON_PATH" ]; then
    echo "Ошибка: Не удалось найти python3. Убедитесь, что он установлен и доступен в PATH."
    exit 1
fi


echo "--- Установка Фамильяра ---"
echo "Рабочая директория проекта: ${PROJECT_DIR}"
echo "Имя пользователя для сервиса: ${CURRENT_USER}" # Display the detected user
echo "Путь к Python 3: ${PYTHON_PATH}"

# --- Get Telegram Bot Token ---
# Check if token already exists in env file to avoid asking again unnecessarily
EXISTING_TOKEN=$(grep '^TELEGRAM_BOT_TOKEN=' "$ENV_FILE" 2>/dev/null | cut -d '=' -f2-)

if [ -z "$EXISTING_TOKEN" ]; then
    read -s -p "Введите ваш Telegram Bot Token: " TELEGRAM_BOT_TOKEN # Use -s for silent input
    echo # Add a newline after silent input
    if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
      echo "Ошибка: Токен не может быть пустым."
      exit 1
    fi
else
    echo "Токен Telegram уже найден в ${ENV_FILE}. Используется существующий."
    TELEGRAM_BOT_TOKEN="$EXISTING_TOKEN"
fi


# --- Create Environment Directory and File ---
echo "--> Создание директории и файла окружения..."
mkdir -p "$ENV_DIR"
if [ $? -ne 0 ]; then echo "Ошибка при создании директории ${ENV_DIR}"; exit 1; fi

# Create/Overwrite env file with token (ensures it's correct if run again)
echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" > "$ENV_FILE"
if [ $? -ne 0 ]; then echo "Ошибка при создании/перезаписи файла ${ENV_FILE}"; exit 1; fi

# Set permissions for env file
chown root:"$CURRENT_GROUP" "$ENV_FILE"
chmod 640 "$ENV_FILE"
echo "Файл окружения ${ENV_FILE} создан/обновлен."

# --- Create systemd Service File ---
echo "--> Создание файла сервиса systemd..."

# Use cat with EOF to create the service file content
# Using the correctly determined CURRENT_USER and CURRENT_GROUP
cat << EOF > "$SERVICE_FILE"
# Systemd unit file for the Familiar Telegram Bot
# Generated by install.sh

[Unit]
Description=Familiar Telegram Bot Assistant
After=network.target ollama.service
Requires=ollama.service

[Service]
User=${CURRENT_USER}
Group=${CURRENT_GROUP}
WorkingDirectory=${PROJECT_DIR}
EnvironmentFile=${ENV_FILE}
# Ensure DISPLAY and XAUTHORITY are passed if needed for GUI interactions
# These should be set by the user's session startup script (update_familiar_env.sh)
# and read via EnvironmentFile
ExecStart=${PYTHON_PATH} -u ${PROJECT_DIR}/telegram_bot.py
Restart=on-failure
RestartSec=5s
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

if [ $? -ne 0 ]; then echo "Ошибка при создании файла ${SERVICE_FILE}"; exit 1; fi

echo "Файл сервиса ${SERVICE_FILE} создан."

# --- Reload systemd, enable and start the service ---
echo "--> Перезагрузка systemd и перезапуск сервиса..."
systemctl daemon-reload
systemctl enable "${SERVICE_NAME}.service"
if [ $? -ne 0 ]; then echo "Ошибка при включении автозапуска сервиса."; exit 1; fi
# Stop potentially running old instance before starting
systemctl stop "${SERVICE_NAME}.service"
systemctl start "${SERVICE_NAME}.service"
if [ $? -ne 0 ]; then echo "Ошибка при запуске сервиса. Проверьте логи: journalctl -u ${SERVICE_NAME}.service"; exit 1; fi

echo "Сервис ${SERVICE_NAME} включен и запущен от имени пользователя ${CURRENT_USER}."

# --- Check service status ---
echo "--> Текущий статус сервиса:"
systemctl status "${SERVICE_NAME}.service" --no-pager

echo "--- Установка/Обновление завершено! ---"
echo "Убедитесь, что скрипт update_familiar_env.sh добавлен в автозапуск вашей сессии для обновления переменных GUI."

exit 0
